name: Build assets in release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      TAG_VERSION: ${{ github.event.inputs.tag_name || github.ref_name }}
      PROJECT_NAME: ${{ github.event.repository.name }}
      NDK_VERSION: "20.1.5948944" # NDK r20b
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            build: buildLinux
            os_name: ubuntu
          - os: ubuntu-latest
            arch: arm64
            build: buildLinux
            os_name: ubuntu
          - os: macos-latest
            arch: amd64
            build: buildMacOS
            os_name: macos
          - os: macos-latest
            arch: arm64
            build: buildMacOS
            os_name: macos
          - os: windows-latest
            arch: amd64
            build: buildWindows
            os_name: windows
          - os: windows-latest
            arch: 386
            build: buildWindows
            os_name: windows
          - os: ubuntu-latest
            arch: amd64
            build: buildAndroid
            os_name: android
          - os: macos-latest
            arch: arm64
            build: buildIOS
            os_name: ios

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Install ARM64 cross-compilation toolchain
        if: matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Install MinGW-w64 using Chocolatey
        if: runner.os == 'Windows' && matrix.arch == '386'
        run: |
          curl -L -o mingw32.7z https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/8.1.0/threads-posix/dwarf/i686-8.1.0-release-posix-dwarf-rt_v6-rev0.7z/download
          7z x mingw32.7z -oC:/mingw32

      - name: Set up JDK 17
        if: matrix.build == 'buildAndroid'
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Android SDK
        if: matrix.build == 'buildAndroid'
        uses: android-actions/setup-android@v3

      - name: Install NDK r20b
        if: matrix.build == 'buildAndroid'
        run: |
          echo "Installing NDK r20b (version $NDK_VERSION)..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;$NDK_VERSION"
          
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/$NDK_VERSION" >> $GITHUB_ENV
          echo "NDK_ROOT=$ANDROID_HOME/ndk/$NDK_VERSION" >> $GITHUB_ENV
          
          if [ -d "$ANDROID_HOME/ndk/$NDK_VERSION" ]; then
            echo "NDK r20b installed successfully"
            ls -la $ANDROID_HOME/ndk/$NDK_VERSION
          else
            echo "NDK installation failed"
            exit 1
          fi

      - name: Setup and build on Windows ${{ matrix.arch }}
        if: runner.os == 'Windows'
        run: |
          ./bootstrap_install_mage.bat
          $env:GOARCH="${{ matrix.arch }}"
          if ($env:GOARCH -eq "386") {
            $env:PATH = "C:/mingw32/bin;$env:PATH"
            gcc --version
            $env:CC="gcc -m32"
            $env:CXX="g++ -m32"
          }

          New-Item -ItemType Directory -Force -Path "shared/ios", "shared/linux", "shared/windows", "shared/android", "shared/macos"
          mage ${{ matrix.build }}

          $tag_version = "${{ github.ref_name }}"
          $archive_name = "${{ matrix.os_name }}-${{ matrix.arch }}-${{ matrix.build }}-$tag_version-assets"
          New-Item -ItemType Directory -Force -Path $archive_name

          if (Test-Path "shared/windows" -PathType Container) {
            Copy-Item -Path "shared/windows/*" -Destination $archive_name -Recurse -ErrorAction SilentlyContinue
          }

      - name: Setup and build on ${{ matrix.os }} ${{ matrix.arch }} ${{ matrix.build }}
        if: runner.os != 'Windows'
        run: |
          sudo bash ./bootstrap_install_mage.sh
          export GOARCH=${{ matrix.arch }}
          mkdir -p shared/ios shared/linux shared/windows shared/android shared/macos

          # Additional setup for iOS ARM64 builds
          if [[ "${{ matrix.build }}" == "buildMacOS" && "${{ matrix.arch }}" == "arm64" ]]; then
            # Ensure Xcode command line tools are available
            xcode-select --install 2>/dev/null || true
            echo "Building MacOS library for ARM64..."
          fi

          sudo -E mage ${{ matrix.build }}

          tag_version="${{ github.ref_name }}"
          archive_name="${{ matrix.os_name }}-${{ matrix.arch }}-${{ matrix.build }}-$tag_version-assets"
          mkdir -p "$archive_name"

          if [[ "${{ matrix.build }}" == "buildIOS" ]]; then
            cp -r shared/ios/* "$archive_name/" 2>/dev/null || echo "No iOS files to copy"
          elif [[ "${{ matrix.build }}" == "buildAndroid" ]]; then
            cp -r shared/android/* "$archive_name/" 2>/dev/null || echo "No Android files to copy"
          elif [[ "${{ matrix.build }}" == "buildLinux" ]]; then
            cp -r shared/linux/* "$archive_name/" 2>/dev/null || echo "No Linux files to copy"
          elif [[ "${{ matrix.build }}" == "buildWindows" ]]; then
            cp -r shared/windows/* "$archive_name/" 2>/dev/null || echo "No Windows files to copy"
          elif [[ "${{ matrix.build }}" == "buildMacOS" ]]; then
            cp -r shared/macos/* "$archive_name/" 2>/dev/null || echo "No MacOS files to copy"
          fi

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          $tag_version = "${{ github.ref_name }}"
          $archive_name = "${{ matrix.os_name }}-${{ matrix.arch }}-${{ matrix.build }}-$tag_version-assets"
          
          if (Test-Path $archive_name) {
          $fileCount = (Get-ChildItem -Path $archive_name -File -Recurse).Count
          if ($fileCount -gt 0) {
           Compress-Archive -Path "$archive_name/*" -DestinationPath "$archive_name.zip" -Force
           Write-Host "Created archive: $archive_name.zip"
           Get-Item "$archive_name.zip"
          } else {
           Write-Host "No files found in $archive_name"
           exit 1
          }
          } else {
          Write-Host "Directory $archive_name not found"
          exit 1
          }

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          tag_version="${{ github.ref_name }}"
          archive_name="${{ matrix.os_name }}-${{ matrix.arch }}-${{ matrix.build }}-$tag_version-assets"
          
          if [ -d "$archive_name" ] && [ "$(find $archive_name -type f | wc -l)" -gt 0 ]; then
            zip -r $archive_name.zip $archive_name/
            echo "Created archive: $archive_name.zip"
            ls -la $archive_name.zip
          else
            echo "No files found in $archive_name"
            exit 1
          fi

      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os_name }}-${{ matrix.arch }}-${{ matrix.build }}-${{ github.ref_name }}-assets
          path: ${{ matrix.os_name }}-${{ matrix.arch }}-${{ matrix.build }}-${{ github.ref_name }}-assets.zip

  release-upload:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded assets
        run: |
          echo "Downloaded artifact files:"
          find artifacts -type f -name '*.zip'

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip
          update_existing: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
